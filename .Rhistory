library(rgdal)
myConvert_LV95_to_WGS84 = function(df) {
coordinates(df) = ~ long + lat
df@proj4string = CRS("+init=epsg:2056")
myCoords_WGS84 = spTransform(df, CRS("+init=epsg:4326"))
myCoords_WGS84@coords
}
WGS84 <- RoadTrafficAccidentLocations |>
select(long=AccidentLocation_CHLV95_E, lat=AccidentLocation_CHLV95_N) |>
myConvert_LV95_to_WGS84()
## bind to the old data
RoadTrafficAccidentLocations |>
select(-AccidentLocation_CHLV95_E, -AccidentLocation_CHLV95_N) |>
bind_cols(WGS84) |>
write_csv("data/RoadTrafficAccidentLocations_GPS.csv")
RoadTrafficAccidentLocations_GPS <- readr::read_csv("data/RoadTrafficAccidentLocations_GPS.csv")
df_chx_chy <- data.frame(chx=c(2500845, 675500), chy=c(1117371, 271500))
test <- df_chx_chy
coords_LV95 = matrix(
c(2500845,1117371,
2726148,1202001,
2726148,1201995),
nrow=3,
ncol=2,
byrow = TRUE
)
myConvert_LV95_to_WGS84(LV95) |>
as.data.frame() |>
ggplot(aes(x=E, y=N)) +
geom_point() +
coord_quickmap() +
theme_bw() +
labs(x="Longitude", y="Latitude") +
ggtitle("Road Traffic Accident Locations") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
theme(axis.title.x = element_text(size = 12)) +
theme(axis.title.y = element_text(size = 12)) +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 10)) +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) +
theme(legend.key = element_blank()) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm"))
myConvert_LV95_to_WGS84(WGS84) |>
as.data.frame() |>
ggplot(aes(x=E, y=N)) +
geom_point() +
coord_quickmap() +
theme_bw() +
labs(x="Longitude", y="Latitude") +
ggtitle("Road Traffic Accident Locations") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
theme(axis.title.x = element_text(size = 12)) +
theme(axis.title.y = element_text(size = 12)) +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 10)) +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) +
theme(legend.key = element_blank()) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm"))
RoadTrafficAccidentLocations_GPS|>
as.data.frame() |>
ggplot(aes(x=E, y=N)) +
geom_point() +
coord_quickmap() +
theme_bw() +
labs(x="Longitude", y="Latitude") +
ggtitle("Road Traffic Accident Locations") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
theme(axis.title.x = element_text(size = 12)) +
theme(axis.title.y = element_text(size = 12)) +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 10)) +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) +
theme(legend.key = element_blank()) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm"))
View(RoadTrafficAccidentLocations_GPS)
RoadTrafficAccidentLocations_GPS|>
as.data.frame() |>
ggplot(aes(x=long, y=lat)) +
geom_point() +
coord_quickmap() +
theme_bw() +
labs(x="Longitude", y="Latitude") +
ggtitle("Road Traffic Accident Locations") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
theme(axis.title.x = element_text(size = 12)) +
theme(axis.title.y = element_text(size = 12)) +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 10)) +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) +
theme(legend.key = element_blank()) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm"))
RoadTrafficAccidentLocations_GPS|>
as.data.frame() |>
ggplot(aes(x=long, y=lat)) +
geom_point() +
# coord_quickmap() +
coord_quickmap(xlim = c(6.1432 - 0.1, 6.1432 + 0.1), ylim = c(46.2044 - 0.1, 46.2044 + 0.1)) +
theme_bw() +
labs(x="Longitude", y="Latitude") +
ggtitle("Road Traffic Accident Locations") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
theme(axis.title.x = element_text(size = 12)) +
theme(axis.title.y = element_text(size = 12)) +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 10)) +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) +
theme(legend.key = element_blank()) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm"))
RoadTrafficAccidentLocations_GPS |>
select(AccidentYear == 2022) |>
as.data.frame() |>
ggplot(aes(x=long, y=lat)) +
geom_point() +
# coord_quickmap() +
coord_quickmap(xlim = c(6.1432 - 0.1, 6.1432 + 0.1), ylim = c(46.2044 - 0.1, 46.2044 + 0.1)) +
theme_bw() +
labs(x="Longitude", y="Latitude") +
ggtitle("Road Traffic Accident Locations") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
theme(axis.title.x = element_text(size = 12)) +
theme(axis.title.y = element_text(size = 12)) +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 10)) +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) +
theme(legend.key = element_blank()) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm"))
RoadTrafficAccidentLocations_GPS |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
ggplot(aes(x=long, y=lat)) +
geom_point() +
# coord_quickmap() +
coord_quickmap(xlim = c(6.1432 - 0.1, 6.1432 + 0.1), ylim = c(46.2044 - 0.1, 46.2044 + 0.1)) +
theme_bw() +
labs(x="Longitude", y="Latitude") +
ggtitle("Road Traffic Accident Locations") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
theme(axis.title.x = element_text(size = 12)) +
theme(axis.title.y = element_text(size = 12)) +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 12)) +
theme(plot.title = element_text(size = 14)) +
theme(legend.title = element_text(size = 12)) +
theme(legend.text = element_text(size = 10)) +
theme(legend.position = "none") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(panel.border = element_blank()) +
theme(panel.background = element_blank()) +
theme(plot.background = element_blank()) +
theme(plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) +
theme(legend.key = element_blank()) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.height = unit(0.5, "cm")) +
theme(legend.key.width = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm")) +
theme(legend.key.size = unit(0.5, "cm"))
library(leaflet)
# Assuming RoadTrafficAccidentLocations_GPS is a data frame with columns 'lat' and 'long'
data <- RoadTrafficAccidentLocations_GPS
leaflet(data) %>%
addTiles() %>%
addMarkers(~long, ~lat)
View(data)
data |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
leaflet() %>%
addTiles() %>%
addMarkers(~long, ~lat)
str(data)
# Geneva coordinates
geneva_lat <- 46.2044
geneva_long <- 6.1432
# Define a range (in degrees) around Geneva
range <- 0.1
# Filter the data
filtered_data <- RoadTrafficAccidentLocations_GPS %>%
filter(between(lat, geneva_lat - range, geneva_lat + range) &
between(long, geneva_long - range, geneva_long + range))
filtered_data |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
leaflet() %>%
addTiles() %>%
addMarkers(~long, ~lat)
unique(filtered_data$AccidentType)
filtered_data |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
leaflet() %>%
addTiles() %>%
addMarkers(~long, ~lat, color = ~AccidentType)
filtered_data |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
leaflet() %>%
addTiles() %>%
addMarkers(~long, ~lat, color = AccidentType)
filtered_data |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
leaflet() %>%
addTiles() %>%
addMarkers(~long, ~lat, label=~as.character(AccidentType))
View(data_accidents_pers_acc)
filtered_data |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
filter(AccidentInvolvingBicycle == TRUE) |>
leaflet() %>%
addTiles() %>%
addMarkers(~long, ~lat, label=~as.character(AccidentType))
filtered_data |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
filter(AccidentInvolvingBicycle == TRUE) |>
leaflet() %>%
addTiles() %>%
addMarkers(~long, ~lat, label=~as.character(AccidentSeverityCategory_en))
df_points <- filtered_data |>
as.data.frame() |>
filter(AccidentYear == 2022) |>
filter(AccidentInvolvingBicycle == TRUE)
# Convert your data points to an `sf` object
points_sf <- sf::st_as_sf(df_points, coords = c("lon", "lat"), crs = 4326)
View(df_points)
# Convert your data points to an `sf` object
points_sf <- sf::st_as_sf(df_points, coords = c("long", "lat"), crs = 4326)
library(greenR)
library(dplyr)
data <- get_osm_data("geneva, switzerland")
high_areas_data <- df$highways
high_areas_data <- data$highways
# Plot the highways and your data points
ggplot() +
geom_sf(data = high_areas_data$osm_lines, color = "blue") +  # plot the highways
geom_sf(data = points_sf, color = "red")  #
library(ggmap)
install.packages("ggmap")
library(ggmap)
# Get the map from OSM
geneva_map <- get_map(location = 'Geneva, Switzerland', source = 'osm')
ggmap::register_google()
# Get the map from Stamen Maps (OSM data)
geneva_map <- get_stamenmap(bbox = c(left = 5.9, bottom = 46.1, right = 6.3, top = 46.3),
zoom = 13,
maptype = "terrain")
geneva_map <- get_stadiamap(bbox = c(left = 5.9, bottom = 46.1, right = 6.3, top = 46.3),
zoom = 13,
maptype = "terrain")
library(ggmap)
# Get the map from Stamen Maps (OSM data)
geneva_map <- get_stadiamap(bbox = c(left = 5.9, bottom = 46.1, right = 6.3, top = 46.3),
zoom = 13,
maptype = "stamen_terrain")
ggmap::register_stadiamaps()
library(ggmap)
stadiamaps_key('2e78277e-cb3c-4379-b825-99b483475376')
register_stadiamaps('2e78277e-cb3c-4379-b825-99b483475376', write = FALSE)
# Get the map from Stamen Maps (OSM data)
geneva_map <- get_stadiamap(bbox = c(left = 5.9, bottom = 46.1, right = 6.3, top = 46.3),
zoom = 13,
maptype = "stamen_terrain")
# Plot the map
ggmap(geneva_map)
library(ggmap)
# Get the map from Stamen Maps (OSM data)
geneva_map <- get_stadiamap(bbox = c(left = 5.9, bottom = 46.1, right = 6.3, top = 46.3),
zoom = 13,
maptype = "stamen_terrain")
register_stadiamaps('2e78277e-cb3c-4379-b825-99b483475376', write = T)
unique(RoadTrafficAccidentLocations_GP$AccidentType_en)
unique(RoadTrafficAccidentLocations_GPS$AccidentType_en)
View*data_accidents_pers_acc <- pxR::read.px(filename = "pers_accidents.px") |>
as.data.frame(language="fr") |> janitor::clean_names()
View(data_accidents_pers_acc <- pxR::read.px(filename = "pers_accidents.px") |>
as.data.frame(language="fr") |> janitor::clean_names())
View(data_accidents_pers_acc)
shiny::runApp()
runApp()
a = read_csv("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS_GPS.csv")
a
git rebase -i HEAD~3
#| label: load data
#| echo: false
#| message: false
# the data is downloaded from the SITG website
#https://ge.ch/sitg/geodata/SITG/OPENDATA/8139/CSV_OTC_ACCIDENTS.zip
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",  escape_double = FALSE,  trim_ws = TRUE)
#change date format
# from double like 20100616 to date
OTC_ACCIDENTS <- OTC_ACCIDENTS |>
mutate(date = as.Date(as.character(date), format = "%Y%m%d"))
#| label: load data
#| echo: false
#| message: false
# the data is downloaded from the SITG website
#https://ge.ch/sitg/geodata/SITG/OPENDATA/8139/CSV_OTC_ACCIDENTS.zip
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
#change date format
# from double like 20100616 to date
OTC_ACCIDENTS <- OTC_ACCIDENTS |>
mutate(date = as.Date(as.character(date), format = "%Y%m%d"))
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
OTC_ACCIDENTS
#| label: load data
#| echo: false
#| message: false
# the data is downloaded from the SITG website
#https://ge.ch/sitg/geodata/SITG/OPENDATA/8139/CSV_OTC_ACCIDENTS.zip
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) |>
janitor::clean_names()
#change date format
# from double like 20100616 to date
OTC_ACCIDENTS <- OTC_ACCIDENTS |>
mutate(date = as.Date(as.character(date), format = "%Y%m%d"))
# Now we project the coordinates to WGS84
myConvert_LV95_to_WGS84 = function(df) {
coordinates(df) = ~ long + lat
df@proj4string = CRS("+init=epsg:2056")
myCoords_WGS84 = spTransform(df, CRS("+init=epsg:4326"))
myCoords_WGS84@coords
}
OTC_ACCIDENTS_GPS <- OTC_ACCIDENTS |>
select(long=coor_x, lat=coor_y) |>
myConvert_LV95_to_WGS84() |>
bind_cols(OTC_ACCIDENTS) |>
write_csv("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS_GPS.csv")
#| label: setup
#| echo: false
#| message: false
knitr::opts_chunk$set(echo = T, message = FALSE, warning = FALSE)
options(
warn = -1,
quarto.hunk.opts = list(
context = 2,
color = TRUE,
collapse = TRUE,
style = "github"
)
library(tidyverse)
library(janitor)
library(plotly)
library(rgdal)
library(leaflet)
#| label: load data
#| echo: false
#| message: false
# the data is downloaded from the SITG website
#https://ge.ch/sitg/geodata/SITG/OPENDATA/8139/CSV_OTC_ACCIDENTS.zip
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) |>
janitor::clean_names()
#change date format
# from double like 20100616 to date
OTC_ACCIDENTS <- OTC_ACCIDENTS |>
mutate(date = as.Date(as.character(date), format = "%Y%m%d"))
# Now we project the coordinates to WGS84
myConvert_LV95_to_WGS84 = function(df) {
coordinates(df) = ~ long + lat
df@proj4string = CRS("+init=epsg:2056")
myCoords_WGS84 = spTransform(df, CRS("+init=epsg:4326"))
myCoords_WGS84@coords
}
OTC_ACCIDENTS_GPS <- OTC_ACCIDENTS |>
select(long=coor_x, lat=coor_y) |>
myConvert_LV95_to_WGS84() |>
bind_cols(OTC_ACCIDENTS) |>
write_csv("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS_GPS.csv")
#massage data
OTC_ACCIDENTS_GPS <-
# Chunk 1: setup
#| label: setup
#| echo: false
#| message: false
knitr::opts_chunk$set(echo = T, message = FALSE, warning = FALSE)
options(
warn = -1,
quarto.hunk.opts = list(
context = 2,
color = TRUE,
collapse = TRUE,
style = "github"
)
library(tidyverse)
library(janitor)
library(plotly)
library(rgdal)
library(leaflet)
#| label: load data
#| echo: false
#| message: false
# the data is downloaded from the SITG website
#https://ge.ch/sitg/geodata/SITG/OPENDATA/8139/CSV_OTC_ACCIDENTS.zip
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) |>
janitor::clean_names() |>
mutate(date = as.Date(as.character(date), format = "%Y%m%d"))
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) |>
janitor::clean_names() |>
mutate(date = as.Date(as.character(date), format = "%Y%m%d"))
read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) |>
janitor::clean_names()
read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) |>
janitor::clean_names() |>
mutate(date = as.Date(as.character(date), format = "%Y%m%d"))
