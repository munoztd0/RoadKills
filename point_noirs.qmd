<<<<<<< HEAD
=======

>>>>>>> new
---
title: "RoadKills"
author: "David Munoz Tord"
date: today
format:
  html:
    code-fold: true
    code-tools: true
    code-link: true
editor_options: 
  chunk_output_type: console
---

<<<<<<< HEAD
=======

## Notes
Carte des points noir (avec dommage materiel) par cluster dernier 5 ans canton

pieton \* juste pieton

roller

velo (velo + 25)

velo lent

velo (rapide)

velo (tout)

accident gravité \*tous

Autoroutes: traffic induit

checker amenagement avec Rob (chemin) -\> SITG

>>>>>>> new
## Intro

```{r}
#| label: setup 
#| echo: false
#| message: false

knitr::opts_chunk$set(echo = T, message = FALSE, warning = FALSE)


options(
  warn = -1,
  quarto.hunk.opts = list(
    context = 2,
    color = TRUE,
    collapse = TRUE,
    style = "github"
  )
)


library(tidyverse)
library(janitor)
library(plotly)
library(rgdal)
library(leaflet)

```

```{r}
#| label: load data
#| echo: false
#| message: false

# the data is downloaded from the SITG website
#https://ge.ch/sitg/geodata/SITG/OPENDATA/8139/CSV_OTC_ACCIDENTS.zip

<<<<<<< HEAD
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv",  escape_double = FALSE,  trim_ws = TRUE)
=======
OTC_ACCIDENTS <- read_delim("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS.csv", 
    delim = ";", escape_double = FALSE, trim_ws = TRUE) |>
  janitor::clean_names()
>>>>>>> new

#change date format
# from double like 20100616 to date

OTC_ACCIDENTS <- OTC_ACCIDENTS |>
  mutate(date = as.Date(as.character(date), format = "%Y%m%d"))


<<<<<<< HEAD


=======
>>>>>>> new
# Now we project the coordinates to WGS84

myConvert_LV95_to_WGS84 = function(df) {
    coordinates(df) = ~ long + lat
    df@proj4string = CRS("+init=epsg:2056")
    myCoords_WGS84 = spTransform(df, CRS("+init=epsg:4326"))
    myCoords_WGS84@coords
}

OTC_ACCIDENTS_GPS <- OTC_ACCIDENTS |> 
  select(long=coor_x, lat=coor_y) |> 
  myConvert_LV95_to_WGS84() |> 
  bind_cols(OTC_ACCIDENTS) |> 
  write_csv("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS_GPS.csv")


<<<<<<< HEAD
#massage data
OTC_ACCIDENTS_GPS <- 

=======
>>>>>>> new
```

```{r}
#| label:  first map

#read "data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS_GPS.csv"
OTC_ACCIDENTS_GPS <- readr::read_csv("data/CSV_OTC_ACCIDENTS/OTC_ACCIDENTS_GPS.csv")


OTC_ACCIDENTS_GPS |>
  as.data.frame() |>
  filter(annee == 2022) |>
  filter(nb_bicyclettes > 0) |>
  leaflet() |>
  addTiles()|>
  addMarkers(~long, ~lat) #, #label=~as.character(AccidentSeverityCategory_en))

```

```{r}
# library(ggplot2)
# 
# library(greenR)
# library(dplyr)
# 
# data <- get_osm_data("geneva, switzerland")
# high_areas_data <- data$highways
# library(pxR) 
# library(tidyverse)
# library(BFS)
# library(janitor)
# library(plotly)
# # Assuming your data points are in a data frame called `df_points` with columns `longitude` and `latitude`
# df_points <- filtered_data |>
#   as.data.frame() |>
#   filter(AccidentYear == 2022) |>
#   filter(AccidentInvolvingBicycle == TRUE)
# 
# # Convert your data points to an `sf` object
# points_sf <- sf::st_as_sf(df_points, coords = c("long", "lat"), crs = 4326)
# 
# # Plot the highways and your data points
# ggplot() +
#   geom_sf(data = high_areas_data$osm_lines, color = "blue") +  # plot the highways
#   geom_sf(data = points_sf, color = "red")  # plot your data points
# 
# 
# library(ggmap)
# 
# # Get the map from Stamen Maps (OSM data) -
# geneva_map <- get_stadiamap(bbox = c(left = 5.9, bottom = 46.1, right = 6.3, top = 46.3), 
#                             zoom = 13, 
#                             maptype = "stamen_terrain")
# 
# # Plot the map
# ggmap(geneva_map)

```


```{r}
#https://data.geo.admin.ch/api/stac/v0.9/collections/

# bfs_download_asset(
#   number_bfs = "px-x-1106010100_104", #number_asset also possible
#   destfile = "pers_accidents.px")

# source("functions.R")
data_accidents_pers_acc <- pxR::read.px(filename = "pers_accidents.px") |>
  as.data.frame(language="fr") |> janitor::clean_names()


data_accidents_pers_acc
pers_accidents_clean <-
    data_accidents_pers_acc |>
  #create new column that gathers cycle, Vélo électrique rapide and Vélo électrique lent into velo
      mutate(type_usager = 
               case_when(
                 moyen_de_transport_utilise == "Vélo électrique rapide" ~ "Vélo",
                 moyen_de_transport_utilise == "Vélo électrique lent" ~ "Vélo",
                 moyen_de_transport_utilise == "Cycle" ~ "Vélo",
                 TRUE ~ moyen_de_transport_utilise
               )
      ) |>
    #now gather Piéton and Engin assimilé à un véhicule  to pieton
      mutate(type_usager = 
               case_when(
                 moyen_de_transport_utilise == "Aucun (piéton)" ~ "Pieton + EAV",
                 moyen_de_transport_utilise == "Engin assimilé à un véhicule (EAV)" ~ "Pieton + EAV",
                 TRUE ~ type_usager
               )
      ) |>
    #now gather Motocycle and Cyclomoteur  to pieton
      mutate(type_usager = 
               case_when(
                 moyen_de_transport_utilise == "Motocycle" ~ "Motocycle",
                 moyen_de_transport_utilise == "Cyclomoteur" ~ "Motocycle",
                 TRUE ~ type_usager
               )
      ) |>
    #now gather Voiture de tourisme and Véhicule de transport de personnes  to voiture
      mutate(type_usager = 
               case_when(
                 moyen_de_transport_utilise == "Voiture de tourisme" ~ "Voiture",
                 moyen_de_transport_utilise == "Véhicule de transport de personnes" ~ "Voiture",
                 moyen_de_transport_utilise == "Véhicule de transport de choses" ~ "Voiture",
                 TRUE ~ type_usager
               )
      ) |>
      #now transform autre (y compris inconnu) to NA
      mutate(type_usager = 
               case_when(
                 moyen_de_transport_utilise == "Autre (y compris inconnu)" ~ NA_character_,
                 TRUE ~ type_usager
               )
      ) 




# Create the ggplot object
p <- pers_accidents_clean %>%
  tidyr::drop_na(type_usager) %>%
  filter(annee == 2022) %>%
  group_by(type_usager, consequence_de_l_accident) %>%
  tally(value) %>%
  ggplot(aes(x = reorder(type_usager, n), 
             y = n, 
             fill = consequence_de_l_accident, 
             text = paste("<br>Nombre d'accidents: ", n))) +
  geom_bar(alpha = 0.8, stat = "identity", position = "dodge") +
  coord_flip() +
  # Improved aesthetics
  labs(
    x = "Type d'usager",
    y = "Nombre d'accidents",
    title = "Accidents par type d'usager en Suisse (2022)",
    fill = "Conséquence de l'accident"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 12),
    axis.title = element_text(size = 14),
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    legend.position = "right"
  ) +
  scale_fill_brewer(palette = "Set2")

# Convert the ggplot object to a Plotly object
plotly_p <- ggplotly(p, tooltip = "text")


plotly_p <- plotly_p %>%
  layout(
    legend = list(
      x = 1, y = 0.5,  # Adjust the position to place it in the middle right
      bgcolor = "white"
    )
  )

plotly_p 


<<<<<<< HEAD
```
=======
```
>>>>>>> new
